# -*- coding: utf-8 -*-
"""Exp-4 Data Mining

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Awja3z6dvJrHCtw_9J37g5VEuvftntE4
"""

import numpy as np
import pandas as pd

Data={'Name':['Rohit','Mohit','Sohit','Ram','Radha','Meena'], 'Age':[22,22,23,110,22,23], 'Gender':['M','M','MALE','F','F','F'], 'Income':[22000,23000,23000,100000000000000000000,22000,22000], 'Marks':[95,92,np.nan,92,93,94]}

df=pd.DataFrame(Data)

df

df['Marks'].fillna(df['Marks'].mean(), inplace=True)

df

df['Gender']=df['Gender'].replace({'MALE': 'M'})

df

df.loc[df['Age'] > 100, 'Age'] = np.nan

df['Age'].fillna(df['Age'].mean(), inplace=True)

df

q1=df['Income'].quantile(0.25)
q3=df['Income'].quantile(0.75)
iqr=q3-q1
upper_bound=q3+1.5*iqr
lower_bound=q1-1.5*iqr
print(upper_bound)
print(lower_bound)

df.loc[df['Income'] > upper_bound, 'Income'] = upper_bound

df.loc[df['Income'] > lower_bound, 'Income'] = lower_bound

df

AdditionalData = {
    'Name': ['Rohit', 'Mohit', 'Sohit', 'Ram', 'Radha', 'Meena'],
    'City': ['C1', 'C2', 'C3', 'C4', 'C5', 'C6'],
    'Scholarship': [True, True, False, True, False, True]
}

df2=pd.DataFrame(AdditionalData)

print(df2)
print(df)

merged=pd.merge(df, df2, on='Name')

merged

df = df.drop(columns=['age'])

print(df)

merged.to_csv('merged.csv', index=False)

merged

from sklearn.preprocessing import LabelEncoder

Encode=LabelEncoder()

merged['Gender']=Encode.fit_transform(merged['Gender'])

merged['City']=Encode.fit_transform(merged['City'])

merged['Name']=Encode.fit_transform(merged['Name'])

merged['Scholarship']=Encode.fit_transform(merged['Scholarship'])

merged

from sklearn.linear_model import LinearRegression

from sklearn.model_selection import train_test_split

X=merged[['City','Gender','Name','Age','Income','Scholarship']]
Y=merged['Marks']

X

Y

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

model=LinearRegression()

model.fit(X_train, Y_train)

y_predict=model.predict(X_test)

y_predict

y_predict=model.predict(np.array([[0	,1,	4,	22.0,	20500.0	,1]]))

y_predict

def Class(Age):
    if Age < 20:
        return 'True'
    elif 20 <= Age < 30:
        return 'Young'
    else:
        return 'Old'

new=merged['Age'].apply(Class)

new

